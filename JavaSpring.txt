
Java Spring :

IOC CONTAINER :
	1. Takes care of object creation
	2. Dependency Injection

1.BeanFactory :
	-> first we need to create resource object to use bean factory.
	-> can create bean factory using XmlBeanFactory class.
	
2.ApplicationContext :
	-> it is kind of extension to beanFactory
	-> can create using ClassPathXmlApplicationContext
	
BeanFactory vs ApplicationContext :
---------------------------------
1. BeanFactory is outdated and deprecated, ApplicationContext is extension of beanFactory and is modern method to create beans
2. BeanFactory creates doesn't create object directly, it searches for xml file and then creates/activates containers but creates object 
   only on calling the object, whereas ApplicationContext creates object while loading xml file itself.
3. BeanFactory is lazy loading, ApplicationContext is early loading.
4. BeanFactory is suitable for standlone only, but ApplicationContext is suitable for all
5. BeanFactory is not able to integrate AOP provided services.
6. BeanFactory supports only singleton and prototype scopes,but the other can supports request,session,Global... scopes as well.
7. BeanFactory depends on resource object explicitly
	
	
-> Even if constructor is private it can still create object in spring because it uses reflection api
-> beans can be created for parameterised constructors too using dependency injection

XML Config:
----------
-> first copy paste the xml context from google.
-> use bean tags to create beans.


Dependency Injection:
---------------------
Dependency Injection (DI) is a design pattern that removes the dependency from the programming code so that it can be easy to manage 
and test the application. Dependency Injection makes our programming code loosely coupled. 

1.Setter Injection:
  ------ ---------
-> this is used to instantiate the parameters or variables values at beans creation.
-> need to create the setters function to use setter injection.
-> Eg:
		<bean id="obj" class="com.javatpoint.Employee">  
		<property name="id" value="1"/>  
		<property name="name" value="Sachin Yadav" />  
		<property name="address" ref="address1" />  
		</bean>  

2.Constructor Injection:
  ----------- ----------
-> this is used to pass values at the time of constructor invoking.
-> Eg:
		<bean id="obj" class="com.javatpoint.Employee">  
			<constructor-arg value="10"/>
			<constructor-arg name="len" value="10"/>
			<constructor-arg index="0" value"10"/>
		</bean>
-> we can use name, index or none while creating.


AutoWire:
--------
-> Autowiring feature of spring framework enables you to inject the object dependency implicitly. 
-> It internally uses setter or constructor injection.
-> Autowiring can't be used to inject primitive and string values. It works with reference only.